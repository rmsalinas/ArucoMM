
apply plugin: 'com.android.application'

android {
    String OPENCV_DIR = 'C:/Users/Pascal/AndroidstudioProjects/OpenCV-3.4.1-android-sdk'
    // /sdk/native/jni/include'3rdparty/OpenCV3.4.1Java'
    String OPENCV_DIR_jni = OPENCV_DIR + '/sdk/native/jni'
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.uco.avaappbeta"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 3
        versionName "1.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {

                // Sets a flag to enable format macro constants for the C++ compiler.
                cppFlags "-std=c++11 -frtti -fexceptions"
                arguments "-DOpenCV_DIR=" + OPENCV_DIR_jni
//                arguments "-DVERBOSE=1 "
                  arguments "-DCMAKE_BUILD_TYPE=Release"
                arguments "-DCMAKE_SHARED_LINKER_FLAGS=-Wl,--exclude-libs,libippicv.a -Wl,--exclude-libs,libippiw.a"

//                cppFlags "-std=c++14 -Ofast -Rpass-analysis=loop-vectorize -fsave-optimization-record -frtti -fexceptions"
                // "-fdiagnostics-show-hotness"
                //sample abi filter parameters
 //               abiFilters "armeabi-v7a" //,'arm64-v8a'//, 'armeabi-v7a'//, 'x86', 'x86_64'
                //set -DANDROID_STL to c++_shared
          //      arguments "-DANDROID_STL=c++_static"
            }
        }
        splits {

            // Configures multiple APKs based on ABI.
            abi {

                // Enables building multiple APKs per ABI.
                enable true

                // By default all ABIs are included, so use reset() and include to specify that we only
                // want APKs for x86 and x86_64.

                // Resets the list of ABIs that Gradle should create APKs for to none.
                reset()

                // Specifies a list of ABIs that Gradle should create APKs for.
                include 'arm64-v8a', 'x86', 'armeabi-v7a' //"armeabi-v7a", "x86"

                // Specifies that we do not want to also generate a universal APK that includes all ABIs.
                universalApk false
            }
        }

    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

//floating action menu library
    implementation 'com.github.clans:fab:1.6.4'
    implementation 'com.heinrichreimersoftware:material-intro:2.0.0'
    implementation 'androidx.databinding:databinding-runtime:3.5.0'
    implementation 'androidx.databinding:databinding-adapters:3.5.0'
    implementation project(path: ':openCVLibrary341')
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 1, 'x86': 2, 'arm64-v8a': 3]

// For per-density APKs, create a similar map like this:
// ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}
